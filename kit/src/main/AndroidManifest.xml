<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.liudonghan.kit">

    <!-- 定位权限 -->
    <permission android:name="android.permission.WRITE_SETTINGS" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" /> <!--用于进行网络定位-->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /> <!--用于访问GPS定位-->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> <!--用于获取运营商信息，用于支持提供运营商信息相关的接口-->
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /> <!--用于访问wifi网络信息，wifi信息会用于进行网络定位-->
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" /> <!--用于获取wifi的获取权限，wifi信息会用来进行网络定位-->
    <uses-permission android:name="android.permission.INTERNET" /> <!--用于访问网络，网络定位需要上网-->
    <uses-permission android:name="android.permission.READ_PHONE_STATE" /> <!--用于读取手机当前的状态-->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /> <!--用于写入缓存数据到扩展存储卡-->
    <uses-permission android:name="android.permission.ACCESS_LOCATION_EXTRA_COMMANDS" /> <!--用于申请调用A-GPS模块-->
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" /> <!--如果设置了target >= 28 如果需要启动后台定位则必须声明这个权限-->
    <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" /> <!--如果您的应用需要后台定位权限，且有可能运行在Android Q设备上,并且设置了target>28，必须增加这个权限声明-->
    <permission android:name="${AD_PACKAGE_NAME}.permission.MIPUSH_RECEIVE" />
    <uses-permission android:name="${AD_PACKAGE_NAME}.permission.MIPUSH_RECEIVE"/>
    <uses-permission android:name="android.permission.GET_TASKS"/>
    <uses-permission android:name="android.permission.VIBRATE"/>
    <application
        android:allowBackup="true"
        android:supportsRtl="true">

        <meta-data android:name="AD_PACKAGE_NAME"
            android:value="${AD_PACKAGE_NAME}"/>

        <!-- 高德定位配置key -->
        <meta-data
            android:name="com.amap.api.v2.apikey"
            android:value="${MAP_KEY}" />
        <!-- 定位需要的服务 使用2.0的定位需要加上这个 -->
        <service
            android:name="com.amap.api.location.APSService"
            android:foregroundServiceType="location"
            android:exported="true"
            tools:ignore="WrongManifestParent" />

        <!--        小米推送配置配置Key-->
        <meta-data
            android:name="MIPUSH_APPID"
            android:value="${MI_APP_ID}" />
        <meta-data
            android:name="MIPUSH_APPKEY"
            android:value="${MI_APP_KEY}" />

        <!--        魅族推送配置key-->
        <meta-data
            android:name="MEIZU_PUSH_APP_ID"
            android:value="\ ${MEIZU_APP_ID}" />
        <meta-data
            android:name="MEIZU_PUSH_APP_KEY"
            android:value="${MEIZU_APP_KEY}" />

        <!--        vivo推送配置key-->
        <meta-data
            android:name="com.vivo.push.api_key"
            android:value="${VIVO_APP_KEY}" />
        <meta-data
            android:name="com.vivo.push.app_id"
            android:value="${VIVO_APP_ID}" />
        <meta-data
            android:name="VIVO_APP_SECRET"
            android:value="${VIVO_APP_SECRET}" />
        <meta-data
            android:name="sdk_version_vivo"
            android:value="484" />
        <meta-data
            android:name="local_iv"
            android:value="MzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsMzIsMzgsMzcsMzYsMzUsMzQsMzMsI0AzNCwzMiwzMywzNywzMywzNCwzMiwzMywzMywzMywzNCw0MSwzNSwzNSwzMiwzMiwjQDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDMyLDM4LDM3LDMzLDM1LDM0LDMzLCNAMzQsMzIsMzMsMzcsMzMsMzQsMzIsMzMsMzMsMzMsMzQsNDEsMzUsMzIsMzIsMzI" />

        <!--        oppo推送配置key-->
        <meta-data
            android:name="OPPO_APP_PUSH_KEY"
            android:value="${OPPO_APP_KEY}" />
        <meta-data
            android:name="OPPO_APP_PUSH_SECRET"
            android:value="${OPPO_APP_SECRET}" />
        <!--        华为推送配置key-->
        <meta-data
            android:name="HMS_APP_ID"
            android:value="${HMS_APP_ID}" />
        <meta-data
            android:name="com.huawei.hms.client.appid"
            android:value="appid=${HMS_APP_ID}" />


        <!-- OPPO Push如果应用需要解析和处理Push消息（如透传消息），则继承PushService来处理，并在此申明如果不需要处理Push消息，则直接申明PsuhService即可  -->
        <service
            android:name=".push.oppo.PushMessageService"
            android:exported="true"
            android:permission="com.coloros.mcs.permission.SEND_MCS_MESSAGE">
            <intent-filter>
                <action android:name="com.coloros.mcs.action.RECEIVE_MCS_MESSAGE" />
            </intent-filter>
        </service>

        <service
            android:name=".push.oppo.AppPushMessageService"
            android:exported="true"
            android:permission="com.heytap.mcs.permission.SEND_PUSH_MESSAGE">
            <intent-filter>
                <action android:name="com.heytap.mcs.action.RECEIVE_MCS_MESSAGE" />
                <action android:name="com.heytap.msp.push.RECEIVE_MCS_MESSAGE" />
            </intent-filter>
        </service>

        <!--vivo push应用定义消息receiver声明 -->
        <service
            android:name="com.vivo.push.sdk.service.CommandClientService"
            android:permission="com.push.permission.UPSTAGESERVICE"
            android:exported="true" />

        <receiver android:name=".push.vivo.PushMessageReceiver"
            android:exported="false">
            <intent-filter>
                <!-- 接收push消息 -->
                <action android:name="com.vivo.pushclient.action.RECEIVE" />
            </intent-filter>
        </receiver>

        <!--meizu-->
        <receiver android:name=".push.meizu.PushMessageReceiver"
            android:exported="true">
            <intent-filter>
                <!-- 接收push消息 -->
                <action android:name="com.meizu.flyme.push.intent.MESSAGE" />
                <!-- 接收register消息 -->
                <action android:name="com.meizu.flyme.push.intent.REGISTER.FEEDBACK" />
                <!-- 接收unregister消息-->
                <action android:name="com.meizu.flyme.push.intent.UNREGISTER.FEEDBACK" />
                <!-- 兼容低版本Flyme3推送服务配置 -->
                <action android:name="com.meizu.c2dm.intent.REGISTRATION" />
                <action android:name="com.meizu.c2dm.intent.RECEIVE" />

                <category android:name="${applicationId}" />
            </intent-filter>
        </receiver>

        <!--        小米-->
        <service
            android:name="com.xiaomi.push.service.XMJobService"
            android:enabled="true"
            android:exported="false"
            android:permission="android.permission.BIND_JOB_SERVICE"
            android:process=":pushservice" />

        <service
            android:name="com.xiaomi.push.service.XMPushService"
            android:enabled="true"
            android:process=":pushservice"
            android:exported="false" />

        <service
            android:name="com.xiaomi.mipush.sdk.PushMessageHandler"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name="com.xiaomi.mipush.sdk.MessageHandleService"
            android:enabled="true" />

        <receiver
            android:name=".push.xiaomi.PushMessageReceiver"
            android:exported="true">
            <intent-filter>
                <action android:name="com.xiaomi.mipush.RECEIVE_MESSAGE" />
            </intent-filter>
            <intent-filter>
                <action android:name="com.xiaomi.mipush.MESSAGE_ARRIVED" />
            </intent-filter>
            <intent-filter>
                <action android:name="com.xiaomi.mipush.ERROR" />
            </intent-filter>
        </receiver>
<!--        <receiver-->
<!--            android:name="com.xiaomi.push.service.receivers.NetworkStatusReceiver"-->
<!--            android:exported="false">-->
<!--            <intent-filter>-->
<!--                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />-->
<!--                <category android:name="android.intent.category.DEFAULT" />-->
<!--            </intent-filter>-->
<!--        </receiver>-->
        <receiver
            android:name="com.xiaomi.push.service.receivers.PingReceiver"
            android:exported="false"
            android:process=":pushservice">
            <intent-filter>
                <action android:name="com.xiaomi.push.PING_TIMER" />
            </intent-filter>
        </receiver>

        <!--        todo 华为-->
        <!--        todo exported属性需要设置为false，限制其他应用的组件唤醒该service。-->
        <!--        todo 请确保仅定义了一个继承HmsMessageService类的“service”。-->
        <!--        todo 当设备开机或重启后但用户尚未解锁设备时，若定义的“service”未配置“直接启动”模式，在您发送透传消息时会无法拉起透传服务。此时，需要您在定义的“service”中添加如下配置：-->
        <service
            android:name=".push.huawei.PushMessageReceiver"
            android:exported="true">
            <intent-filter>
                <action android:name="com.huawei.push.action.MESSAGING_EVENT" />
            </intent-filter>
        </service>

    </application>
</manifest>